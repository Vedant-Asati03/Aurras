# Comprehensive GitHub Actions workflow for Aurras music player
# Builds platform-specific wheels and automates distribution to multiple package managers

name: Build Platform-Specific Wheels

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags
  workflow_dispatch:  # Allow manual triggering
    inputs:
      run_publish:
        description: 'Run publish steps (PyPI, Chocolatey, Homebrew, AUR)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'

env:
  PYTHON_VERSION: '3.12'

jobs:
  # Detect release type for conditional publishing
  detect-release:
    runs-on: ubuntu-latest
    outputs:
      is_prerelease: ${{ steps.check.outputs.is_prerelease }}
      version: ${{ steps.check.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        if: github.event_name == 'workflow_dispatch'
        
      - name: Check release type
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # For manual triggers, get version from latest tag or pyproject.toml
            if git describe --tags --exact-match HEAD 2>/dev/null; then
              VERSION=$(git describe --tags --exact-match HEAD | sed 's/^v//')
            else
              # Fallback to pyproject.toml version
              VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "//' | sed 's/"//')
            fi
          else
            # For tag triggers, extract from tag
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Detected version: $VERSION"
          
          if [[ "$VERSION" =~ (alpha|beta|rc|dev) ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            echo "Detected pre-release version: $VERSION"
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "Detected stable release version: $VERSION"
          fi

  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade uv twine hatchling build
          
      - name: Verify DLL exists
        run: |
          if (Test-Path "aurras/core/player/libmpv-2.dll") {
            Write-Host "DLL found - building Windows wheel with MPV library"
            $dll_size = (Get-Item "aurras/core/player/libmpv-2.dll").Length / 1MB
            Write-Host "DLL size: $([math]::Round($dll_size, 1)) MB"
          } else {
            Write-Host "DLL not found!" -ForegroundColor Red
            exit 1
          }
        shell: powershell
          
      - name: Build Windows wheel (with DLL)
        run: python scripts/build_platform_wheels.py
        
      - name: Upload Windows wheel
        uses: actions/upload-artifact@v4
        with:
          name: windows-wheel
          path: dist/*.whl

  build-universal:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade uv twine hatchling build
          
      - name: Build universal wheel (no DLL)
        run: python scripts/build_platform_wheels.py
        
      - name: Upload universal wheel
        uses: actions/upload-artifact@v4
        with:
          name: universal-wheel
          path: dist/*.whl

  # PyPI Publishing
  publish:
    needs: [build-windows, build-universal, detect-release]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && github.event.inputs.run_publish == 'true')
    steps:
      - name: Download all wheels
        uses: actions/download-artifact@v4
        
      - name: Verify wheel files
        run: |
          echo "Available wheels for publishing:"
          ls -la windows-wheel/ universal-wheel/
          echo ""
          echo "Wheel details:"
          ls -lh windows-wheel/*.whl universal-wheel/*.whl
          
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          pip install twine==5.0.0
          echo "Publishing wheels to PyPI..."
          echo "Windows wheel (with DLL):"
          twine upload windows-wheel/*.whl --verbose --skip-existing
          echo "Universal wheel (no DLL):"
          twine upload universal-wheel/*.whl --verbose --skip-existing
          echo "Publishing complete!"
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            windows-wheel/*.whl
            universal-wheel/*.whl
          generate_release_notes: true
          draft: false
          prerelease: ${{ needs.detect-release.outputs.is_prerelease == 'true' }}
  # Chocolatey Publishing (Windows Package Manager)
  publish-chocolatey:
    needs: [publish, detect-release]
    runs-on: windows-latest
    if: (startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && github.event.inputs.run_publish == 'true')) && needs.detect-release.outputs.is_prerelease == 'false'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Chocolatey
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
        shell: powershell
        
      - name: Update Chocolatey package version
        run: |
          python scripts/release_manager.py ${{ needs.detect-release.outputs.version }}
        
      - name: Check if package exists on Chocolatey
        id: check_choco
        run: |
          $version = "${{ needs.detect-release.outputs.version }}"
          try {
            $response = Invoke-RestMethod -Uri "https://community.chocolatey.org/api/v2/Packages?`$filter=Id%20eq%20%27aurras%27%20and%20Version%20eq%20%27$version%27" -Method Get
            if ($response.feed.entry) {
              echo "exists=true" >> $env:GITHUB_OUTPUT
              echo "Package aurras $version already exists on Chocolatey"
            } else {
              echo "exists=false" >> $env:GITHUB_OUTPUT
              echo "Package aurras $version does not exist on Chocolatey"
            }
          } catch {
            echo "exists=false" >> $env:GITHUB_OUTPUT
            echo "Could not check Chocolatey, assuming package does not exist"
          }
        shell: powershell
        
      - name: Build Chocolatey package
        if: steps.check_choco.outputs.exists == 'false'
        run: |
          cd packaging/choco
          choco pack aurras.nuspec
        
      - name: Publish to Chocolatey
        if: steps.check_choco.outputs.exists == 'false'
        env:
          CHOCO_API_KEY: ${{ secrets.CHOCOLATEY_API_KEY }}
        run: |
          cd packaging/choco
          $package = Get-ChildItem -Filter "*.nupkg" | Select-Object -First 1
          echo "Publishing $($package.Name) to Chocolatey..."
          choco push $package.Name --api-key $env:CHOCO_API_KEY --source https://push.chocolatey.org/
          echo "Chocolatey package published!"
        shell: powershell
        
      - name: Skip Chocolatey publish
        if: steps.check_choco.outputs.exists == 'true'
        run: |
          echo "Skipping Chocolatey publish - package aurras ${{ needs.detect-release.outputs.version }} already exists"
        shell: powershell

  # Homebrew Formula Update (macOS Package Manager)
  update-homebrew:
    needs: [publish, detect-release]
    runs-on: ubuntu-latest
    if: (startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && github.event.inputs.run_publish == 'true')) && needs.detect-release.outputs.is_prerelease == 'false'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build
          
      - name: Check if Homebrew formula needs update
        id: check_homebrew
        run: |
          VERSION=${{ needs.detect-release.outputs.version }}
          
          # Check current version in Homebrew formula
          if [ -f "packaging/homebrew/aurras.rb" ]; then
            CURRENT_VERSION=$(grep -E 'version "[^"]*"' packaging/homebrew/aurras.rb | sed 's/.*version "\([^"]*\)".*/\1/')
            echo "Current Homebrew formula version: $CURRENT_VERSION"
            
            if [ "$CURRENT_VERSION" = "$VERSION" ]; then
              echo "needs_update=false" >> $GITHUB_OUTPUT
              echo "Homebrew formula already at version $VERSION"
            else
              echo "needs_update=true" >> $GITHUB_OUTPUT
              echo "Homebrew formula needs update from $CURRENT_VERSION to $VERSION"
            fi
          else
            echo "needs_update=true" >> $GITHUB_OUTPUT
            echo "Homebrew formula file not found, needs creation"
          fi
          
      - name: Calculate SHA256 for source tarball
        if: steps.check_homebrew.outputs.needs_update == 'true'
        id: sha256
        run: |
          VERSION=${{ needs.detect-release.outputs.version }}
          echo "Creating source tarball locally for SHA256 calculation..."
          
          # Create a source distribution locally
          python -m build --sdist
          
          # Find the generated tarball
          TARBALL=$(find dist/ -name "aurras-${VERSION}.tar.gz" | head -n1)
          
          if [ ! -f "$TARBALL" ]; then
            echo "Source tarball not found in dist/, trying to download from PyPI..."
            
            # Fallback: try to download from PyPI
            for i in {1..3}; do
              if wget -q "https://files.pythonhosted.org/packages/source/a/aurras/aurras-${VERSION}.tar.gz"; then
                TARBALL="aurras-${VERSION}.tar.gz"
                break
              else
                echo "Attempt $i failed, waiting 30 seconds..."
                sleep 30
              fi
            done
            
            if [ ! -f "$TARBALL" ]; then
              echo "Failed to create or download source tarball"
              exit 1
            fi
          fi
          
          SHA256=$(sha256sum "$TARBALL" | cut -d' ' -f1)
          echo "sha256=$SHA256" >> $GITHUB_OUTPUT
          echo "SHA256: $SHA256"
          echo "Calculated from: $TARBALL"
          
      - name: Update Homebrew formula
        if: steps.check_homebrew.outputs.needs_update == 'true'
        run: |
          python scripts/release_manager.py ${{ needs.detect-release.outputs.version }}
          # Update SHA256 in formula
          sed -i "s/sha256 \".*\"/sha256 \"${{ steps.sha256.outputs.sha256 }}\"/" packaging/homebrew/aurras.rb
          
      - name: Create Homebrew PR
        if: steps.check_homebrew.outputs.needs_update == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.HOMEBREW_GITHUB_TOKEN }}
        run: |
          echo "Creating Homebrew formula update..."
          echo "Homebrew formula updated (manual PR creation needed)"
          echo "Formula file ready at: packaging/homebrew/aurras.rb"
          
      - name: Skip Homebrew update
        if: steps.check_homebrew.outputs.needs_update == 'false'
        run: |
          echo "Skipping Homebrew update - formula already at version ${{ needs.detect-release.outputs.version }}"

  # Arch User Repository (AUR) Package Update
  update-aur:
    needs: [publish, detect-release]
    runs-on: ubuntu-latest
    if: (startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && github.event.inputs.run_publish == 'true')) && needs.detect-release.outputs.is_prerelease == 'false'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install makepkg (for AUR package building)
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential fakeroot
          
      - name: Check if AUR package needs update
        id: check_aur
        run: |
          VERSION=${{ needs.detect-release.outputs.version }}
          
          # Check current version in AUR PKGBUILD
          if [ -f "packaging/aur/PKGBUILD" ]; then
            CURRENT_VERSION=$(grep -E '^pkgver=' packaging/aur/PKGBUILD | cut -d'=' -f2)
            echo "Current AUR package version: $CURRENT_VERSION"
            
            if [ "$CURRENT_VERSION" = "$VERSION" ]; then
              echo "needs_update=false" >> $GITHUB_OUTPUT
              echo "AUR package already at version $VERSION"
            else
              echo "needs_update=true" >> $GITHUB_OUTPUT
              echo "AUR package needs update from $CURRENT_VERSION to $VERSION"
            fi
          else
            echo "needs_update=true" >> $GITHUB_OUTPUT
            echo "AUR PKGBUILD file not found, needs creation"
          fi
          
      - name: Setup SSH for AUR
        if: steps.check_aur.outputs.needs_update == 'true'
        env:
          AUR_SSH_KEY: ${{ secrets.AUR_SSH_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$AUR_SSH_KEY" > ~/.ssh/aur
          chmod 600 ~/.ssh/aur
          echo "Host aur.archlinux.org" >> ~/.ssh/config
          echo "  IdentityFile ~/.ssh/aur" >> ~/.ssh/config
          echo "  User aur" >> ~/.ssh/config
          ssh-keyscan aur.archlinux.org >> ~/.ssh/known_hosts
          
      - name: Update AUR package
        if: steps.check_aur.outputs.needs_update == 'true'
        run: |
          VERSION=${{ needs.detect-release.outputs.version }}
          
          # Update version in PKGBUILD
          python scripts/release_manager.py $VERSION
          
          # Clone AUR repo
          git clone ssh://aur@aur.archlinux.org/aurras.git aur-repo
          
          # Copy updated files
          cp packaging/aur/PKGBUILD aur-repo/
          
          cd aur-repo
          
          # Generate .SRCINFO
          makepkg --printsrcinfo > .SRCINFO
          
          # Commit and push
          git config user.name "Aurras Release Bot"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add PKGBUILD .SRCINFO
          git commit -m "Update to version $VERSION"
          git push
          
          echo "AUR package updated!"
          
      - name: Skip AUR update
        if: steps.check_aur.outputs.needs_update == 'false'
        run: |
          echo "Skipping AUR update - package already at version ${{ needs.detect-release.outputs.version }}"
